/*
 * my_CLI.h
 *
 *  Created on: 3 dic. 2020
 *      Author: Santiago-N
 */

#ifndef MY_CLI_H_
#define MY_CLI_H_

/*=====[Includes]=========================================================================*/
#include <stddef.h>
#include <stdint.h>


/*=====[Definitions and macros]===========================================================*/
/* the minumum amount of cliMAX_COMMANDS must be 1 because of help.
should be your max number of commands plus one  */
#ifndef cliMAX_COMMANDS
	#define	cliMAX_COMMANDS					10
#endif

#define configCOMMAND_INT_MAX_OUTPUT_SIZE	1024

#define pdFAIL	( (int)0 )
#define pdPASS	( (int)1 )

#define pdFALSE	( (int)0 )
#define pdTRUE	   ( (int)1 )

/*=====[Definitions of public data types]================================================*/

/* The prototype to which callback functions used to process command line
commands must comply.  pcWriteBuffer is a buffer into which the output from
executing the command can be written, xWriteBufferLen is the length, in bytes of
the pcWriteBuffer buffer, and pcCommandString is the entire string as input by
the user (from which parameters can be extracted).*/
typedef int (*pdCOMMAND_LINE_CALLBACK)( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString );

/**
 *  The structure that defines command line commands.
 *  A command line command should be defined by declaring a const structure of this type.
 */
typedef struct xCOMMAND_LINE_INPUT
{
	const char * const pcCommand;							/**< The command that causes pxCommandInterpreter to be executed.  For example "help".  Must be all lower case. */
	const char * const pcHelpString;						/**< String that describes how to use the command.  Should start with the command itself, and end with "\r\n".  For example "help: Returns a list of all the commands\r\n". */
	const pdCOMMAND_LINE_CALLBACK pxCommandInterpreter;		/**< A pointer to the callback function that will return the output generated by the command. */
	int8_t cExpectedNumberOfParameters;						/**< Commands expect a fixed number of parameters, which may be zero. */
} CLI_Command_Definition_t;

/*=====[Public functions declarations]===================================================*/

/**
 * Register the command passed in using the pxCommandToRegister parameter.
 * Registering a command adds the command to the list of commands that are
 * handled by the command interpreter.  Once a command has been registered it
 * can be executed from the command line.
 *
 * @param	pxCommandToRegister
 * @return
 */
int CLI_RegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister );

/**
 * Runs the command interpreter for the command string "pcCommandInput".  Any
 * output generated by running the command will be placed into pcWriteBuffer.
 * xWriteBufferLen must indicate the size, in bytes, of the buffer pointed to
 * by pcWriteBuffer.
 *
 * my_CLIProcessCommand should be called repeatedly until it returns pdFALSE.
 *
 * @param	pcCommandInput
 * @param	pcWriteBuffer
 * @param	xWriteBufferLen
 * @return
 */
int CLI_ProcessCommand( const char * const pcCommandInput, char *pcWriteBuffer, size_t xWriteBufferLen  );


/*
 * Return a pointer to the uxWantedParameter'th word in pcCommandString.
 * pxParameterStringLength is the size of the parameter pointed by the returned pointer.
 *
 * @param	pcCommandString
 * @param	uxWantedParameter
 * @param	pxParameterStringLength
 * @return
 */
const char* CLI_GetParameter( const char *pcCommandString, unsigned int uxWantedParameter, int *pxParameterStringLength );


#endif /* MY_CLI_H_ */
